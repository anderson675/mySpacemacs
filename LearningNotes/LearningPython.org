* 命令模式/交互模式与基本函数
** 从命令模式进入Python3交互模式：进入终端后输入 python3（会看到行提示符变为>>>)
** 退出交互模式： exit()
** 可以直接进行数学运算
** 打印函数：print()
** 命令模式下可以运行.py文件
** 给某一文件运行的权限： $ chmod a+x hello.py
** 输入和输出
*** print('string1','string2','string3')
**** 输出遇到逗号时，会用空格代替
*** 输入： variable = input(‘可以输入提示字符串在这里’), 会将输入内容存放到变量variable里
    input()返回的数据类型是str！！！
*** 当再次想要输出时，可以直接呼叫变量名称，或者用print()函数
* Pyhton 基础
** 基本：
   注释：#this is a comment
   坚持4个空格的缩进
   使用 ：来缩进语句
** 数据类型和变量：
   整数：Python的整数大小没有限制
   浮点数
   字符串：转义字符\可以使后面跟随的引号以字符形式输出
          换行：'''...'''或者\n
   布尔值
   空值：None
   变量
   常量：用全部大写的名称表示
   地板除：//，用这个做除法运算符保证结果仍是整数
** 字符串和编码
   ASCII编码：大写字母A的编码是65->小写字母z的编码是122。
   Unicode：编码为两个字节，比ASCII多一个（所以如果你写的文本基本上全部是英文的话，用Unicode编码比ASCII编码需要多一倍的存储空间，
                                      在存储和传输上就十分不划算。）
   UTF-8：根据不同的数字大小编码成1-6个字节，对于ASCII兼容好
   字符串：
*** Pyhton3中用Unicode编码
*** ord()函数：获取字符的整数表示
*** chr()函数：把编码转换为对应的字符
*** 如果要在网络上传输，或者保存到磁盘上，就需要把str变为以字节为单位的bytes：
    Python对bytes类型的数据用带b前缀的单引号或双引号表示： x = b'ABC'
*** 对string编码：
    >>>‘string'.encode('编码方式’)
*** 求一个string包含多少字符：
    >>>len('字符串’)
*** 求一个string包含多少字节数：
    >>>len(b'字符串')
*** 保证Python解释器用UTF-8来读取源代码，需要在文件开头上写：
    #!/usr/bin/env python3
    # -*- coding: utf-8 -*-
*** 输出格式化的字符串：
    >>> 'Hi, %s, you have $%d.' % ('Michael', 1000000)
** 使用list和tuple
   list是一种有序的集合，可以随时添加和删除其中的元素。
   list 可以存储不同数据类型
   list 可 nested（多维数组）
   索引从0开始
   -1可以代表最后一个元素的索引
    >>> listname = ['Michael', 'Bob', 'Tracy']
*** 获取list中元素个数
    >>>len(list)
*** 往list末尾追加元素
    >>>list.append('Adam')
*** 将元素插入特定位置
    >>>list.insert(index,string)
*** 要删除list的末尾元素
    >>>list.pop()
*** 删除指定位置的元素
    >>>list.pop(index)
*** 也可以直接赋值给某个元素
    >>>list[index] = 

    
    tuple和list非常类似，但是tuple一旦初始化就不能修改。
*** 消除单个元素时小括号的歧义
    >>> t = (1,)
*** tuple和list 可以混用，这样使得tuple中的list还是可以修改
** 条件判断   
*** If语句
    if <条件判断1>:
     <执行1>
    elif <条件判断2>:
     <执行2>
    elif <条件判断3>:
     <执行3>
    else:
     <执行4>
** 循环
*** For in 循环：
    >>>for x in ...(每个元素代入变量x，然后执行缩进块的语句。)
*** while 循环
    >>>while(condition): statement
*** break: break语句可以提前退出循环
*** continue:通过continue语句，跳过当前的这次循环，直接开始下一次循环
** 使用dict和set  
*** Python内置了字典：dict的支持，dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度。
    >>> d = {'Michael': 95, 'Bob': 75, 'Tracy': 85}
    >>> d['Michael']
    95
    
    key-value存储方式，由于一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉
*** 判断key是否存在
**** 通过in来判断
     >>> 'Thomas' in d
     False
**** 通过get()来判断
     >>> d.get('Thomas')
     如果key不存在，可以返回None
     >>> d.get('Thomas', -1)
     -1（制定了一个value)
*** 删除一个key
    要删除一个key，用pop(key)方法，对应的value也会从dict中删除
*** list 总结
    需要牢记的第一条就是dict的key必须是不可变对象。
    |-------------------------------------------------|
    | 和list比较，dict有以下几个特点：                    |
    |                                                 |
    | 查找和插入的速度极快，不会随着key的增加而变慢；         |
    | 需要占用大量的内存，内存浪费多。                      |
    | 而list相反：                                      |
    |                                                 |
    | 查找和插入的时间随着元素的增加而增加；                 |
    | 占用空间小，浪费内存很少。                           |
    | 所以，dict是用空间来换取时间的一种方法。               |
    |-------------------------------------------------|

*** set:set和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key
**** 要创建一个set，需要提供一个list作为输入集合
**** 重复元素在set中自动被过滤
**** 添加元素到key中：
     >>>set.add(key)
**** 删除key中的元素
     >>>set.remove(key)
**** 两个set可以做数学意义上的交集、并集等操作
* Python 函数
** 调用函数：调用Python的函数，需要根据函数定义，传入正确的参数。
*** 数据类型转换
** 定义函数：
   >>>def function():
       (statement)
       return;
***  从一个文件中导入函数：
    >>>from [fileName] import [functionName]
*** 空函数
    >>>def func():
        pass
    pass可作为占位符；
** 函数的参数
*** 可设定默认参数：>>>def power(x, n=2):
    一是必选参数在前，默认参数在后，否则Python的解释器会报错
    当函数有多个参数时，把变化大的参数放前面，变化小的参数放后面。变化小的参数就可以作为默认参数。定义默认参数要牢记一点：默认参数必须指向不变对象！
*** 可变参数
    >>>def calc(*numbers):
        return
****    *numbers接收到的是一个tuple，因此，函数代码完全不变。但是，调用该函数时，可以传入任意个参数，包括0个参数
****    list或tuple前面也可以加一个*号，把list或tuple的元素变成可变参数传进去
*** 关键字参数
    关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict（它可以扩展函数的功能）
    （试想你正在做一个用户注册的功能，除了用户名和年龄是必填项外，其他都是可选项，利用关键字参数来定义这个函数就能满足注册的需求）
    person('Jack', 24, **keywords)
*** 命名关键字参数
    如果要限制关键字参数的名字，就可以用命名关键字参数，例如，只接收city和job作为关键字参数。这种方式定义的函数如下：
    >>>def person(name, age, *, city, job):  //*后面的参数被视为命名关键字参数
    >>>print(name, age, city, job)
**** 如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符*了
**** 命名关键字参数必须传入参数名（以区分位置参数）
**** 命名关键字参数city具有默认值，调用时，可不传入city参数
*** 参数组合
    参数定义的顺序必须是：必选参数、
                      默认参数（要用不可变对象）、
                      可变参数（*接收的是一个tuple）、
                      命名关键字参数（为了限制调用者可以传入的参数名，同时可以提供默认值）、
                      关键字参数（**接收的是一个dict）
*** 递归函数
    如果一个函数在内部调用自身本身，这个函数就是递归函数。
    使用递归函数需要注意防止栈溢出。每当进入一个函数调用，栈就会加一层栈帧，每当函数返回，栈就会减一层栈帧。
    解决递归调用栈溢出的方法是通过尾递归优化（在函数返回的时候，调用自身本身，并且，return语句不能包含表达式。）
* 高级特性
** 切片（Slice）
   List[Start index:End index]  //Similar to MatLab
*** '字符串'也可看做为List
** 迭代（Iteration）
**** 使用for in 来遍历一个list
     for key in dict
     for value in dict
     for key, value in dict.items()
     for ch in 'string'
**** 判断一个对象是否可迭代
     >>> from collections import Iterable
     >>> isinstance(OBJECT, Iterable)
**** 对List实现下标循环
     >>> for i, value in enumerate(['A', 'B', 'C']):
     ...     print(i, value)
** 列表生成器（List Comprehensions）
   list(range(1, 11))   //>>> [x * x for x in range(1, 11)]
                        //>>> [m + n for m in 'ABC' for n in 'XYZ']
   写列表生成式时，把要生成的元素x * x放到前面，后面跟for循环，就可以把list创建出来
   for循环后面还可以加上if判断
** 生成器(Generator)
   一边循环一边计算的机制，只要把一个列表生成式的[]改成()，就创建了一个generator
*** next(generator)来得到下一个值，没有更多的元素时，抛出StopIteration的错误
    如果一个函数定义中包含yield关键字，那么这个函数就不再是一个普通函数，而是一个generator
    变成generator的函数，在每次调用next()的时候执行，遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行。
